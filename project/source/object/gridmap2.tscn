[gd_scene load_steps=3 format=3 uid="uid://cl5mlii74wqdl"]

[ext_resource type="MeshLibrary" uid="uid://co2fihrhl0fs4" path="res://resource/bit_resource/mesh_library/main_mesh_library.tres" id="1_a7n4u"]

[sub_resource type="GDScript" id="GDScript_v76ix"]
script/source = "
extends GridMap

var chunk_zoom = [[0,1],[1,0],[1,1],[0,-1],[-1,0],[-1,-1],[1,-1],[-1,1]]

var chunk_size = 64
var hight = 16

var noise
var noise_seed = randi_range(0,999999999)

var collision_point = Vector3(0,0,0)
var camera_pos = Vector3(0,0,0)

func _ready():
	noise = FastNoiseLite.new()
	noise.noise_type = 3
	noise.seed = noise_seed
	
	for the_chunk in chunk_zoom:
		for x in range(camera_pos.x+the_chunk[0]*chunk_size,camera_pos.x+the_chunk[1]*chunk_size):
			for z in range(camera_pos.z+the_chunk[0]*chunk_size,camera_pos.z+the_chunk[1]*chunk_size):
				for y in range(hight):
					var the_noise = noise.get_noise_3d(x,y,z)*32
					if the_noise <= 0 and get_cell_item (Vector3(x,the_noise+1,z)) == -1:
						set_cell_item(Vector3(x,the_noise,z),2,0)
					elif get_cell_item (Vector3(x,the_noise+1,z)) == -1:
						set_cell_item(Vector3(x,the_noise,z),0,0)
					else:
						set_cell_item(Vector3(x,the_noise,z),1,0)
					
func _process(delta):
	
	if collision_point != Vector3(0,0,0):
		var pos = local_to_map(Vector3i(collision_point))
		set_cell_item(Vector3(pos.x,pos.y-1,pos.z),3,0)
"

[node name="Gridmap2" type="GridMap"]
mesh_library = ExtResource("1_a7n4u")
cell_size = Vector3(1.6, 1.6, 1.6)
script = SubResource("GDScript_v76ix")
