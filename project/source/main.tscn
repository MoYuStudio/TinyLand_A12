[gd_scene load_steps=18 format=3 uid="uid://wwpvjmd5lbfq"]

[ext_resource type="MeshLibrary" uid="uid://co2fihrhl0fs4" path="res://resource/bit_resource/mesh_library/main_mesh_library.tres" id="2_k4x4t"]
[ext_resource type="Texture2D" uid="uid://detgtla4rwd33" path="res://resource/graphics/steam/steam_bg_fin.png" id="3_aojvk"]

[sub_resource type="GDScript" id="GDScript_os8tr"]
script/source = "
extends Camera3D

var move_speed = 0.2

# cam look
var minLookAngle : float = -90.0
var maxLookAngle : float = 90.0
var lookSensitivity : float = 30.0

# vectors
var moveing_vel = Vector3()
var mouse_delta = Vector2()

func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	pass
	
func _input(event):
  
	if event is InputEventMouseMotion:
		mouse_delta = event.relative
		
func _process(delta):
  
	# rotate the camera along the x axis
	rotation_degrees.x -= mouse_delta.y * lookSensitivity * delta

	# clamp camera x rotation axis
	rotation_degrees.x = clamp(rotation_degrees.x, minLookAngle, maxLookAngle)

	# rotate the player along their y-axis
	rotation_degrees.y -= mouse_delta.x * lookSensitivity * delta

	# reset the mouseDelta vector
	mouse_delta = Vector2()

func _physics_process(delta):
	
	# reset the x and z velocity
	moveing_vel.x = 0
	moveing_vel.y = 0
	moveing_vel.z = 0
  
	var input = Vector3()
  
	# movement inputs
	if Input.is_action_pressed('W'):
		input.z -= 1
	if Input.is_action_pressed('S'):
		input.z += 1
	if Input.is_action_pressed('A'):
		input.x -= 1
	if Input.is_action_pressed('D'):
		input.x += 1
	if Input.is_action_pressed('Space'):
		input.y += 1
	if Input.is_action_pressed('Shift'):
		input.y -= 1
		
	input = input.normalized()
	
	# get the forward and right directions
	var forward = global_transform.basis.z
	var right = global_transform.basis.x
	
	var relativeDir = (forward * input.z + right * input.x)
	
	# set the velocity
	moveing_vel.x = relativeDir.x * move_speed
	moveing_vel.y = input.y * move_speed
	moveing_vel.z = relativeDir.z * move_speed
	
	position.x += moveing_vel.x
	position.y += moveing_vel.y
	position.z += moveing_vel.z
	

	

"

[sub_resource type="GDScript" id="GDScript_04gv0"]
script/source = "
extends DirectionalLight3D

func _ready():
	rotation_degrees.x = 0
	rotation_degrees.y = 0

func _process(delta):
	#print(rotation_degrees.x)
	rotation_degrees.x += 0.2
	rotation_degrees.y += 0.2
	#if rotation_degrees.x >= 90 and rotation_degrees.x <= 180:
	#	light_color.b -= 0.003
	#elif rotation_degrees.x >= -90 and rotation_degrees.x <= 0:
	#	light_color.b -= 0.003
	#else:
	#	light_color.b += 0.0015
	#if rotation_degrees.x == -180:
	#	light_color.b = 150
	if rotation_degrees.x > 360:
		rotation_degrees.x = 0
	if rotation_degrees.y > 360:
		rotation_degrees.y = 0
	
"

[sub_resource type="GDScript" id="GDScript_yyiph"]
script/source = "
extends DirectionalLight3D

func _ready():
	rotation_degrees.x = -180
	rotation_degrees.y = -180

func _process(delta):

	rotation_degrees.x += 0.2
	rotation_degrees.y += 0.2

	if rotation_degrees.x > 360:
		rotation_degrees.x = 0
	if rotation_degrees.y > 360:
		rotation_degrees.y = 0
"

[sub_resource type="GDScript" id="GDScript_i6g6p"]
script/source = "
extends GridMap

var board = 128
var hight = 6

var noise
var noise_seed = 0
var octaves = 3 # 4
var period = 25 # 20.0
var persistence = 0.8

func _ready():
	noise = FastNoiseLite.new()
	noise.noise_type = 3
	#randomize()
	#noise.seed = noise_seed
	#noise.fractal_octaves = octaves
	#noise.frequency = period
	#noise.fractal_ping_pong_strength = persistence
	
	for x in range(board):
		for y in range(board):
			for z in range(board):
				var the_noise = noise.get_noise_3d(x,y,z)*16
				if the_noise <= 0 and get_cell_item (Vector3(x,the_noise-1,z)) == -1:
					set_cell_item(Vector3(x,the_noise,z),2,0)
				elif get_cell_item (Vector3(x,the_noise+1,z)) == -1:
					set_cell_item(Vector3(x,the_noise,z),0,0)
				else:
					set_cell_item(Vector3(x,the_noise,z),1,0)
					
func _process(delta):
	set_cell_item(Vector3(0,0,0),0,3)
"

[sub_resource type="PhysicalSkyMaterial" id="PhysicalSkyMaterial_x7yv5"]

[sub_resource type="Sky" id="Sky_hnv5c"]
sky_material = SubResource("PhysicalSkyMaterial_x7yv5")

[sub_resource type="Environment" id="Environment_8dq1e"]
background_mode = 2
sky = SubResource("Sky_hnv5c")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_fvv84"]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_2jnm5"]
output_port_for_preview = 0
parameter_name = "Pixelisation"
hint = 2
min = 256.0
max = 512.0
step = 2.0
default_value_enabled = true
default_value = 4.0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_2ipjn"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_obycw"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0)]
op_type = 0
function = 17

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_h4f8q"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0
operator = 3

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_a3uu2"]
source = 1

[sub_resource type="VisualShader" id="VisualShader_an6bm"]
code = "shader_type canvas_item;
uniform float Pixelisation : hint_range(256, 512, 2) = 4;



void fragment() {
// Input:2
	vec2 n_out2p0 = UV;


// FloatParameter:3
	float n_out3p0 = Pixelisation;


// VectorOp:4
	vec2 n_out4p0 = n_out2p0 * vec2(n_out3p0);


// VectorFunc:5
	vec2 n_out5p0 = floor(n_out4p0);


// VectorOp:6
	vec2 n_out6p0 = n_out5p0 / vec2(n_out3p0);


	vec4 n_out7p0;
// Texture2D:7
	n_out7p0 = textureLod(SCREEN_TEXTURE, n_out6p0, 0.0);


// Output:0
	COLOR.rgb = vec3(n_out7p0.xyz);


}
"
graph_offset = Vector2(43.8512, 418.18)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(620, 340)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_fvv84")
nodes/fragment/2/position = Vector2(-580, 80)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatParameter_2jnm5")
nodes/fragment/3/position = Vector2(-580, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorOp_2ipjn")
nodes/fragment/4/position = Vector2(-220, 80)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorFunc_obycw")
nodes/fragment/5/position = Vector2(-40, 80)
nodes/fragment/6/node = SubResource("VisualShaderNodeVectorOp_h4f8q")
nodes/fragment/6/position = Vector2(160, 300)
nodes/fragment/7/node = SubResource("VisualShaderNodeTexture_a3uu2")
nodes/fragment/7/position = Vector2(400, 320)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 5, 0, 5, 0, 6, 0, 3, 0, 6, 1, 6, 0, 7, 0, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ch05w"]
shader = SubResource("VisualShader_an6bm")
shader_parameter/Pixelisation = null

[node name="main" type="Node3D"]

[node name="Camera" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.929133, 0.369747, 0, -0.369747, 0.929133, 0.693, 9.675, 2.24)
fov = 85.0
script = SubResource("GDScript_os8tr")

[node name="SunLight" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.123601, 0.992332, 0, -0.992332, 0.123601, 0, 20.44, -5.25435)
light_color = Color(0.980392, 0.741176, 0.603922, 1)
light_energy = 2.0
light_indirect_energy = 2.596
light_volumetric_fog_energy = 2.761
shadow_enabled = true
directional_shadow_max_distance = 139.0
script = SubResource("GDScript_04gv0")

[node name="MoonLight" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.123601, 0.992332, 0, -0.992332, 0.123601, 0, 20.44, -5.25435)
light_color = Color(0.839216, 0.894118, 1, 1)
shadow_enabled = true
script = SubResource("GDScript_yyiph")

[node name="GridMap" type="GridMap" parent="."]
mesh_library = ExtResource("2_k4x4t")
cell_size = Vector3(1.6, 1.6, 1.6)
collision_mask = 3
script = SubResource("GDScript_i6g6p")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_8dq1e")

[node name="PixalUV(NOT WORK)" type="Sprite2D" parent="."]
visible = false
material = SubResource("ShaderMaterial_ch05w")
use_parent_material = true
position = Vector2(670.5, 374)
scale = Vector2(4.36201, 5.4221)
texture = ExtResource("3_aojvk")
