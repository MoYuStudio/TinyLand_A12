[gd_scene load_steps=46 format=3 uid="uid://wwpvjmd5lbfq"]

[ext_resource type="MeshLibrary" uid="uid://co2fihrhl0fs4" path="res://resource/bit_resource/mesh_library/main_mesh_library.tres" id="2_k4x4t"]
[ext_resource type="Texture2D" uid="uid://d1ls4ges7ofqd" path="res://resource/graphics/sky/sky1.png" id="2_lcwye"]
[ext_resource type="Texture2D" uid="uid://detgtla4rwd33" path="res://resource/graphics/steam/steam_bg_fin.png" id="3_aojvk"]

[sub_resource type="GDScript" id="GDScript_os8tr"]
script/source = "
extends Camera3D

var move_speed = 0.6

# cam look
var minLookAngle : float = -90.0
var maxLookAngle : float = 90.0
var lookSensitivity : float = 30.0

# vectors
var moveing_vel = Vector3()
var mouse_delta = Vector2()

func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	pass
	
func _input(event):
  
	if event is InputEventMouseMotion:
		mouse_delta = event.relative
		
func _process(delta):
  
	# rotate the camera along the x axis
	rotation_degrees.x -= mouse_delta.y * lookSensitivity * delta

	# clamp camera x rotation axis
	rotation_degrees.x = clamp(rotation_degrees.x, minLookAngle, maxLookAngle)

	# rotate the player along their y-axis
	rotation_degrees.y -= mouse_delta.x * lookSensitivity * delta

	# reset the mouseDelta vector
	mouse_delta = Vector2()

func _physics_process(delta):
	
	# reset the x and z velocity
	moveing_vel.x = 0
	moveing_vel.y = 0
	moveing_vel.z = 0
  
	var input = Vector3()
  
	# movement inputs
	if Input.is_action_pressed('W'):
		input.z -= 1
	if Input.is_action_pressed('S'):
		input.z += 1
	if Input.is_action_pressed('A'):
		input.x -= 1
	if Input.is_action_pressed('D'):
		input.x += 1
	if Input.is_action_pressed('Space'):
		input.y += 1
	if Input.is_action_pressed('Shift'):
		input.y -= 1
		
	input = input.normalized()
	
	# get the forward and right directions
	var forward = global_transform.basis.z
	var right = global_transform.basis.x
	
	var relativeDir = (forward * input.z + right * input.x)
	
	# set the velocity
	moveing_vel.x = relativeDir.x * move_speed
	moveing_vel.y = input.y * move_speed
	moveing_vel.z = relativeDir.z * move_speed
	
	position.x += moveing_vel.x
	position.y += moveing_vel.y
	position.z += moveing_vel.z
	

	

"

[sub_resource type="GDScript" id="GDScript_04gv0"]
script/source = "
extends DirectionalLight3D

func _ready():
	rotation_degrees.x = 0
	rotation_degrees.y = 0

func _process(delta):
	#print(rotation_degrees.x)
	rotation_degrees.x += 0.2
	rotation_degrees.y += 0.2
	#if rotation_degrees.x >= 90 and rotation_degrees.x <= 180:
	#	light_color.b -= 0.003
	#elif rotation_degrees.x >= -90 and rotation_degrees.x <= 0:
	#	light_color.b -= 0.003
	#else:
	#	light_color.b += 0.0015
	#if rotation_degrees.x == -180:
	#	light_color.b = 150
	if rotation_degrees.x > 360:
		rotation_degrees.x = 0
	if rotation_degrees.y > 360:
		rotation_degrees.y = 0
	
"

[sub_resource type="GDScript" id="GDScript_yyiph"]
script/source = "
extends DirectionalLight3D

func _ready():
	rotation_degrees.x = -180
	rotation_degrees.y = -180

func _process(delta):

	rotation_degrees.x += 0.2
	rotation_degrees.y += 0.2

	if rotation_degrees.x > 360:
		rotation_degrees.x = 0
	if rotation_degrees.y > 360:
		rotation_degrees.y = 0
"

[sub_resource type="GDScript" id="GDScript_i6g6p"]
script/source = "
extends GridMap

var board = 256
var hight = 16

var noise
var noise_seed = 0
var octaves = 3 # 4
var period = 25 # 20.0
var persistence = 0.8

func _ready():
	noise = FastNoiseLite.new()
	noise.noise_type = 3
	#randomize()
	#noise.seed = noise_seed
	#noise.fractal_octaves = octaves
	#noise.frequency = period
	#noise.fractal_ping_pong_strength = persistence
	
	
	for x in range(board):
		for z in range(board):
			for y in range(hight):
				var the_noise = noise.get_noise_3d(x,y,z)*16
				if the_noise <= 0 and get_cell_item (Vector3(x,the_noise+1,z)) == -1:
					set_cell_item(Vector3(x,the_noise,z),2,0)
					
				elif get_cell_item (Vector3(x,the_noise+1,z)) == -1:
					set_cell_item(Vector3(x,the_noise,z),0,0)
					#if randi_range(0,10) == 2:
					#	set_cell_item(Vector3(x,the_noise+1,z),4,0)
					#	set_cell_item(Vector3(x,the_noise,z),0,0)
				else:
					set_cell_item(Vector3(x,the_noise,z),1,0)
					
					
func _process(delta):
	set_cell_item(Vector3(0,0,0),0,3)
"

[sub_resource type="PanoramaSkyMaterial" id="PanoramaSkyMaterial_mjr1u"]
panorama = ExtResource("2_lcwye")
filter = false

[sub_resource type="Sky" id="Sky_hnv5c"]
sky_material = SubResource("PanoramaSkyMaterial_mjr1u")

[sub_resource type="Environment" id="Environment_8dq1e"]
background_mode = 2
sky = SubResource("Sky_hnv5c")

[sub_resource type="GDScript" id="GDScript_dm78c"]
script/source = "extends WorldEnvironment

func _ready():
	pass

func _process(delta):
	environment.sky_rotation.y += 0.0001
"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_fvv84"]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_2jnm5"]
output_port_for_preview = 0
parameter_name = "Pixelisation"
hint = 2
min = 256.0
max = 512.0
step = 2.0
default_value_enabled = true
default_value = 4.0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_2ipjn"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_obycw"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0)]
op_type = 0
function = 17

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_h4f8q"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0
operator = 3

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_a3uu2"]
source = 1

[sub_resource type="VisualShader" id="VisualShader_an6bm"]
code = "shader_type canvas_item;
uniform float Pixelisation : hint_range(256, 512, 2) = 4;



void fragment() {
// Input:2
	vec2 n_out2p0 = UV;


// FloatParameter:3
	float n_out3p0 = Pixelisation;


// VectorOp:4
	vec2 n_out4p0 = n_out2p0 * vec2(n_out3p0);


// VectorFunc:5
	vec2 n_out5p0 = floor(n_out4p0);


// VectorOp:6
	vec2 n_out6p0 = n_out5p0 / vec2(n_out3p0);


	vec4 n_out7p0;
// Texture2D:7
	n_out7p0 = textureLod(SCREEN_TEXTURE, n_out6p0, 0.0);


// Output:0
	COLOR.rgb = vec3(n_out7p0.xyz);


}
"
graph_offset = Vector2(-260.119, 42.9945)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(620, 340)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_fvv84")
nodes/fragment/2/position = Vector2(-580, 80)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatParameter_2jnm5")
nodes/fragment/3/position = Vector2(-580, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorOp_2ipjn")
nodes/fragment/4/position = Vector2(-220, 80)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorFunc_obycw")
nodes/fragment/5/position = Vector2(-40, 80)
nodes/fragment/6/node = SubResource("VisualShaderNodeVectorOp_h4f8q")
nodes/fragment/6/position = Vector2(160, 300)
nodes/fragment/7/node = SubResource("VisualShaderNodeTexture_a3uu2")
nodes/fragment/7/position = Vector2(400, 320)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 5, 0, 5, 0, 6, 0, 3, 0, 6, 1, 6, 0, 7, 0, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ch05w"]
shader = SubResource("VisualShader_an6bm")
shader_parameter/Pixelisation = null

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_ut42f"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_flse7"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(1.25, 1.25, 1.25, 1.25)]
op_type = 2
operator = 5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_w4qiy"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ykvny"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_bc77w"]
noise_type = 2
frequency = 0.1
fractal_type = 0
cellular_distance_function = 1
cellular_jitter = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_rw3ss"]
seamless = true
noise = SubResource("FastNoiseLite_bc77w")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_6cce7"]
texture = SubResource("NoiseTexture2D_rw3ss")

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_3ay01"]
parameter_name = "ColorParameter"
default_value_enabled = true
default_value = Color(0, 0.266667, 0.533333, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_tjpxs"]
noise_type = 2
frequency = 0.1
fractal_type = 0
cellular_distance_function = 1
cellular_jitter = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_skpor"]
seamless = true
noise = SubResource("FastNoiseLite_tjpxs")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_wb6sj"]
texture = SubResource("NoiseTexture2D_skpor")

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_osgj0"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_guxdf"]
default_input_values = [1, Vector2(0.01, 0.01), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_kwx0c"]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_a3mnd"]
input_name = "time"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_nwtxc"]
default_input_values = [1, Vector2(-0.01, -0.01), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_yosy6"]
input_name = "time"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_y3fgx"]
default_input_values = [1, Vector2(0.01, 0.01), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_te44l"]
texture = SubResource("NoiseTexture2D_skpor")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_nw735"]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ujbby"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_vsl0i"]
default_input_values = [0, Vector4(0, 0, 0, 0), 1, Vector4(1, 1, 1, 1), 2, Vector4(0, 0, 0, 0)]
op_type = 3

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_hamal"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0.6, 0.6, 0.6)]
operator = 2

[sub_resource type="VisualShader" id="VisualShader_nrbj5"]
code = "shader_type spatial;
uniform sampler2D tex_vtx_4;
uniform vec4 ColorParameter : source_color = vec4(0.000000, 0.266667, 0.533333, 1.000000);
uniform sampler2D tex_frg_3;
uniform sampler2D tex_frg_14;



void vertex() {
// Input:2
	float n_out2p0 = TIME;


// UVFunc:3
	vec2 n_in3p1 = vec2(0.01000, 0.01000);
	vec2 n_out3p0 = fma(vec2(n_out2p0), n_in3p1, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_vtx_4, n_out3p0);


// Input:5
	vec3 n_out5p0 = NORMAL;


// VectorOp:8
	vec3 n_in8p1 = vec3(0.60000, 0.60000, 0.60000);
	vec3 n_out8p0 = n_out5p0 * n_in8p1;


// Input:6
	vec3 n_out6p0 = VERTEX;


// MultiplyAdd:7
	vec4 n_out7p0 = fma(n_out4p0, vec4(n_out8p0, 0.0), vec4(n_out6p0, 0.0));


// Output:0
	VERTEX = vec3(n_out7p0.xyz);


}

void fragment() {
// ColorParameter:2
	vec4 n_out2p0 = ColorParameter;


// Input:6
	float n_out6p0 = TIME;


// UVFunc:5
	vec2 n_in5p1 = vec2(0.01000, 0.01000);
	vec2 n_out5p0 = fma(vec2(n_out6p0), n_in5p1, UV);


// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, n_out5p0);


// Input:8
	float n_out8p0 = TIME;


// UVFunc:9
	vec2 n_in9p1 = vec2(-0.01000, -0.01000);
	vec2 n_out9p0 = fma(vec2(n_out8p0), n_in9p1, UV);


// Texture2D:14
	vec4 n_out14p0 = texture(tex_frg_14, n_out9p0);


// VectorOp:10
	vec4 n_out10p0 = n_out3p0 * n_out14p0;


// VectorOp:11
	vec4 n_in11p1 = vec4(1.25000, 1.25000, 1.25000, 1.25000);
	vec4 n_out11p0 = pow(n_out10p0, n_in11p1);


// VectorOp:4
	vec4 n_out4p0 = n_out2p0 + n_out11p0;


// FloatConstant:12
	float n_out12p0 = 0.800000;


// FloatConstant:13
	float n_out13p0 = 0.000000;


// Output:0
	ALBEDO = vec3(n_out4p0.xyz);
	ALPHA = n_out12p0;
	ROUGHNESS = n_out13p0;
	EMISSION = vec3(n_out4p0.xyz);


}
"
graph_offset = Vector2(-594.072, -132.343)
nodes/vertex/0/position = Vector2(480, 240)
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_yosy6")
nodes/vertex/2/position = Vector2(-440, 140)
nodes/vertex/3/node = SubResource("VisualShaderNodeUVFunc_y3fgx")
nodes/vertex/3/position = Vector2(-160, 60)
nodes/vertex/4/node = SubResource("VisualShaderNodeTexture_te44l")
nodes/vertex/4/position = Vector2(60, -40)
nodes/vertex/5/node = SubResource("VisualShaderNodeInput_nw735")
nodes/vertex/5/position = Vector2(-420, 280)
nodes/vertex/6/node = SubResource("VisualShaderNodeInput_ujbby")
nodes/vertex/6/position = Vector2(-240, 380)
nodes/vertex/7/node = SubResource("VisualShaderNodeMultiplyAdd_vsl0i")
nodes/vertex/7/position = Vector2(280, 220)
nodes/vertex/8/node = SubResource("VisualShaderNodeVectorOp_hamal")
nodes/vertex/8/position = Vector2(-100, 220)
nodes/vertex/connections = PackedInt32Array(2, 0, 3, 2, 3, 0, 4, 0, 4, 0, 7, 0, 6, 0, 7, 2, 7, 0, 0, 0, 5, 0, 8, 0, 8, 0, 7, 1)
nodes/fragment/0/position = Vector2(400, 120)
nodes/fragment/2/node = SubResource("VisualShaderNodeColorParameter_3ay01")
nodes/fragment/2/position = Vector2(-480, -100)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_wb6sj")
nodes/fragment/3/position = Vector2(-800, -60)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorOp_osgj0")
nodes/fragment/4/position = Vector2(-180, 60)
nodes/fragment/5/node = SubResource("VisualShaderNodeUVFunc_guxdf")
nodes/fragment/5/position = Vector2(-1020, 40)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_kwx0c")
nodes/fragment/6/position = Vector2(-1320, 120)
nodes/fragment/8/node = SubResource("VisualShaderNodeInput_a3mnd")
nodes/fragment/8/position = Vector2(-1320, 340)
nodes/fragment/9/node = SubResource("VisualShaderNodeUVFunc_nwtxc")
nodes/fragment/9/position = Vector2(-1020, 260)
nodes/fragment/10/node = SubResource("VisualShaderNodeVectorOp_ut42f")
nodes/fragment/10/position = Vector2(-580, 100)
nodes/fragment/11/node = SubResource("VisualShaderNodeVectorOp_flse7")
nodes/fragment/11/position = Vector2(-420, 100)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatConstant_w4qiy")
nodes/fragment/12/position = Vector2(-60, 220)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatConstant_ykvny")
nodes/fragment/13/position = Vector2(-60, 300)
nodes/fragment/14/node = SubResource("VisualShaderNodeTexture_6cce7")
nodes/fragment/14/position = Vector2(-800, 200)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 0, 4, 0, 0, 0, 5, 0, 3, 0, 6, 0, 5, 2, 8, 0, 9, 2, 3, 0, 10, 0, 10, 0, 11, 0, 11, 0, 4, 1, 12, 0, 0, 1, 13, 0, 0, 3, 4, 0, 0, 5, 9, 0, 14, 0, 14, 0, 10, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jrpo6"]
render_priority = 0
shader = SubResource("VisualShader_nrbj5")
shader_parameter/ColorParameter = null

[sub_resource type="PlaneMesh" id="PlaneMesh_bm22i"]
material = SubResource("ShaderMaterial_jrpo6")
size = Vector2(500, 500)
subdivide_width = 20
subdivide_depth = 20

[node name="main" type="Node3D"]

[node name="Camera" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.929133, 0.369747, 0, -0.369747, 0.929133, 0.693, 9.675, 2.24)
fov = 85.0
script = SubResource("GDScript_os8tr")

[node name="SunLight" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.123601, 0.992332, 0, -0.992332, 0.123601, 0, 20.44, -5.25435)
light_color = Color(0.980392, 0.741176, 0.603922, 1)
light_energy = 2.0
light_indirect_energy = 2.596
light_volumetric_fog_energy = 2.761
shadow_enabled = true
directional_shadow_max_distance = 139.0
script = SubResource("GDScript_04gv0")

[node name="MoonLight" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.123601, 0.992332, 0, -0.992332, 0.123601, 0, 20.44, -5.25435)
light_color = Color(0.839216, 0.894118, 1, 1)
shadow_enabled = true
script = SubResource("GDScript_yyiph")

[node name="GridMap" type="GridMap" parent="."]
mesh_library = ExtResource("2_k4x4t")
cell_size = Vector3(1.6, 1.6, 1.6)
collision_mask = 3
script = SubResource("GDScript_i6g6p")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_8dq1e")
script = SubResource("GDScript_dm78c")

[node name="PixalUV(NOT WORK)" type="Sprite2D" parent="."]
visible = false
material = SubResource("ShaderMaterial_ch05w")
use_parent_material = true
position = Vector2(670.5, 374)
scale = Vector2(4.36201, 5.4221)
texture = ExtResource("3_aojvk")

[node name="Water" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 225, 4, 225)
mesh = SubResource("PlaneMesh_bm22i")
